//数组实现栈
#include <iostream>
#include <exception>
using namespace std;
#define NUM 5

class MyStack {
private:
	int *array;
	int size;
	int index;
public:
	MyStack(int N);
	~MyStack();
	void push(int element);
	int pop();
	int peek();
	void printStack();
};
MyStack::MyStack(int N) {
	size = N;
	array = new int[N];
	index = 0;
}
MyStack::~MyStack() {
	delete[] array;
}
void MyStack::push(int element) {
	if (index == size)
		throw ("栈已满");
	else
		array[index++] = element;
}
int MyStack::pop() {
	if (index == 0)
		throw("栈为空");
	else
		return array[--index];
}
//查看栈顶元素
int MyStack::peek() {
	if (index == 0)
		return -1;
	else
		return array[index - 1];
}
void MyStack::printStack() {
	for (int i = 0; i < size; ++i)
		cout << array[i] << " ";
	cout << endl;
}
int main()
{
	MyStack stack(NUM);
	stack.push(1);
	stack.push(2);
	stack.push(3);
	stack.push(4);
	stack.push(5);
	stack.printStack();
	for (int i = 0; i < NUM; ++i) {
		cout << "pop =" << stack.pop() << endl;
		cout << "peek =" << stack.peek() << endl;
	}
	stack.printStack();
	return 0;
	return 0;
}

//数组实现队列
#include <iostream>
#include <exception>
using namespace std;
#define NUM 5

class MyQueue {
private:
	int *array;
	int start;
	int end;
	int size;
	int len;
public:
	MyQueue(int N);
	~MyQueue();
	void push(int element);
	int pop();
	int peek();
};
MyQueue::MyQueue(int N) {
	size = 0;
	start = 0;
	end = 0;
	len = N;
	array = new int[len];
}
MyQueue::~MyQueue() {
	delete[] array;
}
void MyQueue::push(int element) {
	if (size == len)
		throw ("队列已满");
	size++;
	array[end] = element;
	end = end == len - 1 ? 0 : end + 1;
}
int MyQueue::pop() {
	if (size == 0)
		throw("队列为空");
	size--;
	int temp = start;
	start = start == len - 1 ? 0 : start + 1;
	return array[temp];
}
//查看队首元素
int MyQueue::peek() {
	if (size == 0)
		return -1;
	else
		return array[start];
}

int main()
{
	MyQueue queue(NUM);
	queue.push(1);
	queue.push(2);
	queue.push(3);
	queue.push(4);
	queue.push(5);
	cout << queue.pop() << endl;
	cout << queue.peek() << endl;

	return 0;
}
