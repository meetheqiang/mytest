#include <iostream>
#include <exception>
#include <stack>
using namespace std;

template<typename T> 
class MinStack
 {
public:
	void push(const T& num);
	void pop();
	T getMin() const;
private:
	stack<T> sData;    // 数据栈
	stack<T> sMin;     // 最小栈
};
template<typename T>
T MinStack<T>::getMin() const {
	if (sMin.empty()) {
		throw runtime_error("min stack is empty");
	}
	else {
		return sMin.top();  // top是获取栈顶元素
	}
}
template<typename T>
void MinStack<T>::push(const T& num) {
	if (sData.empty()) {    // 如果当前数据栈为空
		sData.push(num);
		sMin.push(num);
	}
	else if (num < getMin()) { // 如果当前数小于sMin栈的元素
		sData.push(num);
		sMin.push(num);
	}
	else {
		sData.push(num);
	}
}
template<typename T>
void MinStack<T>::pop() {
	if (sData.top() == sMin.top()) {    // 如果sData栈顶元素等于sMin栈顶元素
		sData.pop();
		sMin.pop();
	}
	else {
		sData.pop();
	}
}

int main() {
	MinStack<int> s;
	s.push(5);
	s.push(3);
	s.push(2);
	s.push(4);
	s.push(6);
	s.push(3);
	s.push(1);
	cout << s.getMin() << endl;
	s.pop();
	cout << s.getMin() << endl;
	s.pop();
	cout << s.getMin() << endl;
	s.pop();
	cout << s.getMin() << endl;
	s.pop();
	cout << s.getMin() << endl;
	s.pop();
	cout << s.getMin() << endl;
	s.pop();

	return 0;
}
