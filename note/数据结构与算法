//2019.05.27
1.时间复杂度
O(N)                    //读作big O

2.对数器
1）需要测试的方法a
2）正确但复杂度不好的算法b
3）随机样本产生器
4）实现对比的方法
5）把方法a和方法b比对很多次来验证方法a是否正确
6）如果有样本对比出错，打印样本分析
7）当样本数量很多时对比依然正确，则方法a也正确
#include <time.h>
#include <stdlib.h>
#include <iostream>
using namespace std;
int len = 0;

//需要测试的方法a
int Merge(int ary[], int l, int m, int r) {
	int i = 0;
	int *help = new int[r - l + 1];
	int p1 = l;
	int p2 = m + 1;
	int res = 0;
	while (p1 <= m && p2 <= r) {
		res += ary[p1] < ary[p2] ? (r- p2 + 1)*ary[p1] : 0;
		help[i++] = ary[p1] < ary[p2] ? ary[p1++] : ary[p2++];
	}
	while (p1 <= m) {
		help[i++] = ary[p1++];
	}
	while (p2 <= r) {
		help[i++] = ary[p2++];
	}
	for (int j = 0; j < r - l + 1; ++j) {
		ary[l + j] = help[j];
	}
	return res;
}
int MergeSort(int ary[], int l, int r) {
	if (l == r) {
		return 0;
	}

	int m = l + ((r - l) >> 1);
	return MergeSort(ary, l, m) + MergeSort(ary, m+1, r) + Merge(ary, l, m, r);
}
int SmallSum(int ary[], int len) {
	if (ary == NULL && len < 2) {
		return 0;
	}

	return MergeSort(ary, 0, len - 1);
}
//正确但复杂度不好的算法b
int Comparator(int arr[], int len) {
	if (arr == NULL || len < 2)
		return 0;

	int res = 0;
	for (int i = 1; i < len; ++i) {
		for (int j = 0; j < i; ++j) {
			res += arr[j] < arr[i] ? arr[j] : 0;
		}
	}
	return res;
}
//随机样本生成函数
int* generateRandomArray(int maxSize,int& len,int maxValue) {
	srand((unsigned)time(NULL));
	len = (int)(rand() % (maxSize + 1));
	int *arr = new int[len];
	for (int i = 0; i < len; i++) {
		arr[i] = (int)(rand()%(maxValue + 1)) - (int)(rand()%maxValue);
	}
	return arr;
}
//拷贝随机样本
int* copyArray(int arr[],int len) {
	if (arr == NULL) {
		return NULL;
	}
	int *res = new int[len];
	for (int i = 0; i < len; i++) {
		res[i] = arr[i];
	}
	return res;
}
//比较两种方法输出
bool isEqual(int arr1[],int len1, int arr2[],int len2) {
	if ((arr1 == NULL && arr2 != NULL) || (arr1 != NULL && arr2 == NULL)) {
		return false;
	}
	if (arr1 == NULL && arr2 == NULL) {
		return true;
	}
	if (len1 != len2) {
		return false;
	}
	for (int i = 0; i < len1; i++) {
		if (arr1[i] != arr2[i]) {
			return false;
		}
	}
	return true;
}
//打印样本数据
void printArray(int arr[],int len) {
	if (arr == NULL) {
		return;
	}
	for (int i = 0; i < len; i++) {
		cout<<arr[i]<<" ";
	}
	cout<<endl;
}
//主函数
int main() {
	int testTime = 500000;          //样本数量
	int maxSize = 100;              //样本长度
	int maxValue = 100;             //样本取值范围
	bool succeed = true;
	for (int i = 0; i < testTime; i++) {
		int *arr1 = generateRandomArray(maxSize,len,maxValue);
		int *arr2 = copyArray(arr1,len);
		if (SmallSum(arr1,len) != Comparator(arr2,len)) {
			succeed = false;
			printArray(arr1,len);
			printArray(arr2,len);
			break;
		}
	}
	cout<<(succeed ? "Nice!" : "Fucking fucked!");

	return 0;
}

3.冒泡排序
时间复杂度O（n^2），空间复杂的O（1）
void BubbleSort（int ary[], int len）
{
    if(ary == NULL || len < 2)
        return;
        
    for(int j =  len-1; j >0; --j){
        for(int i = 0; i <j; ++i){
            if(ary[i] > ary[i+1])
                swap(ary, i, i+1);
        }
    }
}

4.选择排序
时间复杂度O（n^2），空间复杂的O（1）
void SelectionSort(int ary[],int len)
{
    if(ary == NULL || len < 2)
        return;
        
    for(int i = 0; i < len-1; ++i){
        int midIndex = i;
        for(int j = i+1; j < len; ++j){
            minIndex = ary[minIndex] > ary[j] ? j : minIndex;
        }
        if(i != minIndex)
        swap(ary, i, minIndex);
    }
}

5.插入排序
时间复杂度O（n^2），空间复杂的O（1）。原本有序的情况下,最好情况时间复杂度为O（n）
void InsertSort(int ary[], int len)
{
    if(ary == NULL || len < 2)
        return;
        
    for(int i=0; i < len; ++i){
        for(int j = i-1; j >= 0 && ary[j] > ary[j+1]; --j){
            swap(ary, j, j+1);
        }
    }
}

6.递归行为时间复杂度估算
master公式：
T(N) = a*T(N/b) + O(N^d)                    //N/b为子问题规模，a为递归次数，O(N^d)除递归外操作的时间复杂度
1)log(b,a) > d, 复杂度为O（N^log(b,a)）;
2)log(b,a) = d, 复杂度为O（N^d * logN）;
3)log(b,a) < d, 复杂度为O（N^d）
补充：http://www.gocalf.com/blog/algorithm-complexity-and-master-theorem.html

7.归并排序
时间复杂度为O（N * logN)，空间复杂度为O(N)。
void Merge(int ary[], int l, int mid, int r)
{
    int *help = new int[r-l+1];
    int p1 = l;
    int p2 = mid +1;
    int i = 0;
    while(p1 <= mid && p2 <= r){
        help[i++] = ary[p1] < ary[p2] ? ary[p1++] : ary[p2++];
    }
    while(p1 <= mid){
        help[i++] = ary[p1++];
    }
    while(p2 <= r){
        help[i++] = ary[p2++];
    }
    for(int j = 0; j < r-l+1; ++j){
        ary[l+j] = help[j];
    }
}
void MergeSort(int ary[], int l, int r)
{
    if(l == r)
        return;
        
    int mid = l + ((r - 1) >> 1);
    MergeSort(ary, l, mid);
    MergeSort(ary, mid + 1, r);
    Merge(ary, l, mid, r);
}
void MergeSort(int ary[], int len)
{
    if(ary == NULL || len <2)
        return;
        
    MergeSort(ary, 0, len -1);
}

8.小和问题
在一个数组中，每一个数左边比当前数小的数累加起来，叫做这个数组的小和。
int Merge(int ary[], int l, int m, int r)
{
    int i= 0;
    int *help = new int[r-l+1];
    int p1 = l;
    int p2 = m+1;
    int res = 0;
    while(p1 <= m && p2 <= r){
        res += ary[p1] < ary[p2] ? (r-p2+1) * ary[p1]:0;
        help[i++] = ary[p1] < ary[p2] ? ary[p1++] : ary[p2++];
    }
    while(p1 <= m){
        help[i++] = ary[p1++];
    }
    while(p2 <= r){
        help[i++] = ary[p2++];
    }
    for(int j = 0; j < r-l+1; ++j){
        ary[l+j] = help[j];
    }
    return res;
}
int MergeSort(int ary[], int l, int r)
{
    if(l == r)
        return 0;
        
    int m = l + ((r-l)>>1);
    return MergeSort(ary, l, m) + MergeSort(ary, m+1, r) + Merge(ary, l, m, r);
}
int SmallSum(int ary[], int len)
{
    if(ary == NULL || len < 2)
        return 0;
        
    return MergeSort(ary, 0, len-1);
}

//2019.06.03
1.荷兰国旗问题
时间复杂度O（n），空间复杂的O（1）
给定一个数组ary[]和一个数num，排序后：等于num的数在中间，小于num的数在左边，大于num的数在右边；
void partition(int ary[], int l, int r, int num)
{
	int less = l - 1;
	int more = r + 1;
	int cur = l;
	while (cur < more) {
		if (ary[cur] < num) {
			swap(ary,++less, cur++);
		}
		else if (ary[cur] > num) {
			swap(ary,--more, cur);
		}
		else {
			++cur;
		}
	}
}

2.经典快排与随机快排
时间复杂度O（N * logN）,额外空间复杂度O（logN）
#include <time.h>
#include <iostream>
using namespace std;
int p[2];                       //使用全局变量接收数组返回

void print(int ary[], int len) {
	for (int i = 0; i < len; ++i)
		cout << ary[i] << " ";
	cout << endl;
}
void swap(int ary[], int i, int j) {
	int temp = ary[i];
	ary[i] = ary[j];
	ary[j] = temp;
}

void partition(int ary[], int l, int r) {
	int less = l - 1;
	int more = r;
	int cur = l;
	while (cur < more) {
		if (ary[cur] < ary[r]) {
			swap(ary, ++less, cur++);
		}
		else if (ary[cur] > ary[r]) {
			swap(ary, --more, cur);
		}
		else {
			cur++;
		}
	}
	swap(ary, more, r);
	p[0] = cur + 1;
	p[1] = more;
}
void quickSort(int ary[], int l, int r) {
	if (l < r) {
		srand((unsigned)time(NULL));
		swap(ary, (int)(rand() % (r - l + 1) + l), r);
		partition(ary, l, r);
		quickSort(ary, l, p[0] - 1);
		quickSort(ary, p[1] + 1, r);
	}
}
void quickSort(int ary[], int len) {
	if (ary == NULL || len < 2)
		return;

	quickSort(ary, 0, len - 1);
}
//主函数
int main()
{
	int ary[] = { 4,2,8,3,5,7,9,1,6 };
	int len = sizeof(ary) / sizeof(int);
	print(ary, len);
	quickSort(ary, len);
	print(ary, len);

	return 0;
  }

3.堆排序
3.1 完全二叉树>满二叉树
使用数组模拟完全二叉树
节点i：左子节点为2*i+1,右子节点为2*i+2,父节点为（i-1）/2;
3.2 堆就是完全二叉树，分为大根堆和小根堆
层数为logN，插入i节点代价为log（i-1）；
3.3 对应的数据结构为优先级队列
3.4 堆排序
1）大根堆
2）堆顶和最后位置数交换
3）重新调整大根堆
code:
//新插入一个数
void heapInsert(int ary[], int index) {
	while (ary[index] > ary[(index - 1) / 2]) {
		swap(ary, index, (index - 1) / 2);
		index = (index - 1) / 2;
	}
}
//如果顶节点改变
void heapify(int ary[], int index, int size) {
	int left = index * 2 + 1;
	while (left < size) {
		int largest = left + 1 < size && ary[left + 1] > ary[left] ? left + 1 : left;
		largest = ary[largest] > ary[index] ? largest : index;
		if (largest == index) {
			break;
		}
		swap(ary, largest, index);
		index = largest;
		left = index * 2 + 1;
	}
}
//不断交换顶节点与末尾节点
void heapSort(int ary[], int len) {
	if (ary == NULL || len < 2)
		return;

	for (int i = 0; i < len; ++i) {
		heapInsert(ary, i);
	}
	int size = len;
	swap(ary, 0, --size);
	while (size > 0) {
		heapify(ary, 0, size);
		swap(ary, 0, --size);
	}
}

//2019.06.04
1.排序稳定性
相同值的相对次序不改变
冒泡、插入可以，选择不稳定
归并可以，快排、堆排不稳定

2.综合排序
长，基础类型：快排
长，自定义类型：归并（稳定性）
短：插排（常数项小）

3.比较器
用于重载系统排序算法
sort(student,cmp());
PriorityQueue<> 优先队列，堆
TreeMap<> 红黑树
TreeSet<Student> treeSet = new treeSet(cmp);

4.桶排序：计数排序、基数排序（非比较）
与数据情况有关
稳定，O（N），O（N）
例：
n个数，准备n+1个桶

5.数组结构实现大小固定的队列和栈
