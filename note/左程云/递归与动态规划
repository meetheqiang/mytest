1.1 斐波那契
#include<iostream>
using namespace std;

int fun(int n) {
	if (n < 1)
		return 0;
	if (n == 1 || n == 2)
		return 1;

	int res = 1;
	int pre = 1;
	int temp = 0;
	for (int i = 3; i <= n; ++i) {
		temp = res;
		res = res + pre;
		pre = temp;
	}
	return res;
}

int main() {
	int n;
	while (cin >> n) {
		cout<<fun(n)<<endl;
	}
}

1.2 爬台阶
#include<iostream>
using namespace std;

int fun(int n) {
	if (n < 1)
		return 0;
	if (n == 1 || n == 2)
		return 1;

	int res = 2;
	int pre = 1;
	int temp = 0;
	for (int i = 3; i <= n; ++i) {
		temp = res; 
		res = res + pre;
		pre = temp;
	}
	return res;
}

int main() {
	int n;
	while (cin >> n) {
		cout<<fun(n)<<endl;
	}
}

1.3 母牛
#include<iostream>
using namespace std;

int fun(int n) {
	if (n < 1)
		return 0;
	if (n == 1 || n == 2|| n == 3)
		return n;

	int res = 3;
	int pre = 2;
	int pre1 = 1;
	int temp = 0;
	int temp1 = 0;
	for (int i = 4; i <= n; ++i) {
		temp = res;
		temp1 = pre;
		res = res + pre1;
		pre = temp;
		pre1 = temp1;
	}
	return res;
}

int main() {
	int n;
	while (cin >> n) {
		cout<<fun(n)<<endl;
	}
}


2.1 矩阵最短路径和
#include<iostream>
#include<algorithm>
using namespace std;
const int N = 10;

int fun(int** m, int row, int col) {
	if (m == NULL || *m == NULL || row == 0 || col == 0)
		return 0;
	int dp[N][N] = { 0 };
	dp[0][0] = m[0][0];
	for (int i = 1; i < col; ++i) {
		dp[0][i] = dp[0][i-1] + m[0][i];
	}
	for (int i = 1; i < col; ++i) {
		dp[i][0] = dp[i-1][0] + m[i][0];
	}
	for (int i = 1; i < row; ++i) {
		for (int j = 1; j < col; ++j) {
			dp[i][j] = min(dp[i - 1][j], dp[i][j - 1]) + m[i][j];
		}
	}
	return dp[row - 1][col - 1];
}

int main() {
	int m[4][4]={ {1,3,5,9},{8,1,3,4},{5,0,6,1},{8,8,4,0} };
	int row = sizeof(m) / sizeof(m[0]);
	int col = sizeof(m[0]) / sizeof(m[0][0]);

	int** num = new int*[row];
	for (int i = 0; i < row; ++i) {
		num[i] = new int[col];
		for (int j = 0; j < col; ++j) {
			num[i][j] = m[i][j];
		}
	}

	cout << fun(num,row, col) << endl;

	for (int i = 0; i < row; ++i)
		delete[](int*)num[i];
	delete[] num;
}

2.2空间复杂度为，min{n,m}
#include<iostream>
#include<algorithm>
using namespace std;

int fun(int** m, int row, int col) {
	if (m == NULL || *m == NULL || row == 0 || col == 0)
		return 0;

	int more = max(row, col);
	int less = min(row, col);
	bool rowmore = more == row;
	int* ary = new int[less];
	ary[0] = m[0][0];

	for (int i = 1; i < less; ++i) {
		ary[i] = ary[i - 1] + (rowmore ? m[0][i] : m[i][0]);
	}
	for (int i = 1; i < more; ++i) {
		ary[0] = ary[0] + (rowmore ? m[i][0] : m[0][i]);
		for (int j = 1; j < less; ++j) {
			ary[j] = min(ary[j - 1], ary[j]) + (rowmore ? m[i][j] : m[j][i]);
		}
	}
	return ary[less-1];
}

int main() {
	int m[4][4]={ {1,3,5,9},{8,1,3,4},{5,0,6,1},{8,8,4,0} };
	int row = sizeof(m) / sizeof(m[0]);
	int col = sizeof(m[0]) / sizeof(m[0][0]);

	int** num = new int*[row];
	for (int i = 0; i < row; ++i) {
		num[i] = new int[col];
		for (int j = 0; j < col; ++j) {
			num[i][j] = m[i][j];
		}
	}

	cout << fun(num,row, col) << endl;

	for (int i = 0; i < row; ++i)
		delete[](int*)num[i];
	delete[] num;
}
